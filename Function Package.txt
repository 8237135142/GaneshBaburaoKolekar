java.util.function package :-
 
1. In the Java standard library has many interface which contain only a single abstract method.
2. In Java 8 version, new package (java.util.function) that is specifically designed to contain only functional interfaces.
3. The interfaces in java.util.function fall into four categories: 
	(1) consumer  - it take a generic argument and return nothing
	(2) supplier  - it take no arguments and return a value
	(3) predicate - it take an argument and return a boolean
	(4) function  - it take a single argument and return a value
4. Static and default methods are also available in this interfaces instead of supplier interface.

=============================================================================================================================

1) Consumer Interface :
   --------------------

1. A Consumer is a functional interface that accepts a single input and returns no output.
2. Consumer interface has two methods:

	void accept(T t);  //The accept method is the Single Abstract Method (SAM) which accepts a single argument of type T

	default Consumer<T> andThen(Consumer<? super T> after);  //andThen method is a default method used for composition

3. Best example, default forEach method (java.util.Iterable) it takes a Consumer as as argument.
		
		default void forEach(Consumer action)

   lets take example.....
 
4. Consumer interface has specific implementation types for integer, double and long types with IntConsumer, DoubleConsumer, 
   and LongConsumer as shown below:

	 Interface 		Single abstract method
     ------------------      ---------------------------
	IntConsumer 		 void accept(int x)
	DoubleConsumer 		 void accept(double x)
	LongConsumer 		 void accept(long x)
	BiConsumer 		 void accept(T t, U u)

5. accept(T t, U u) method in BiConsumer Interface takes two different types of generic arguments.





2) Supplier Interface :
  ----------------------
1. A Supplier is a simple interface which indicates that this implementation is a supplier of results.
2. It contains only one abstract method T get() and does not have any other default and static methods.
3. One simple example of a Supplier is the Math.random method, which takes no arguments and returns a double.
4. The supplier interface has its primitive variants such as IntSupplier, DoubleSupplier and so on as shown below.

		 Interface		Single abstract method
	     ------------------       ---------------------------
		IntSupplier 		  int getAsInt()
		DoubleSupplier 		  double getAsDouble()
		LongSupplier 		  long getAsLong()
		BooleanSupplier 	  boolean getAsBoolean()
	
Note : method name is get() for the generic supplier interface. 
       However, for the primitive variants, it is as per the primitive type. 
lets take example....

5. One of the primary usage of this interface to enable deferred execution. This means delaying the execution until it is needed. 
   For example, Optional class has a method named orElseGet. This method is triggered if optional does not have data. 

one more example....
============================================================================================================================================

public T orElse(T other)             			- orElse() takes any parameter of a type T

public T orElseGet(Supplier<? extends T> other)		- orElseGet() accepts a functional interface of type Supplier that returns an object of type T

orElse(): returns the value if present, otherwise return other
orElseGet(): returns the value if present, otherwise invoke other and return the result of its invocation


==============================================================================================================================================

3) Predicate InterFace :
  -----------------------
1. A Predicate interface represents a boolean-valued-function of an argument.
2. Predicates are used primarily to filter streams.
3. A predicate has a test() method which accepts an argument and returns a boolean value.
4. Predicate also provides a few default and static method for composition and other purposes:
	- default Predicate<T> and(Predicate<? super T> other);
	- default Predicate<T> or(Predicate<? super T> other);
	- static <T> Predicate<T> isEquals(Object targetRef);
	- default Predicate<T> negate();

lets take example...



4) Function Interface : 
  ----------------------
1. A Function interface is more of a generic one that takes one argument and produces a result. 
2. This has a Single Abstract Method (SAM) apply() which accepts an argument of a type T and produces a result of type R. 
3. One of the common use cases of this interface is Stream.map method.

lets take example...

4.
 Interface		Single abstract method
------------------       ---------------------------
IntFunction 		R apply(int value)
DoubleFunction 		R apply(double value)
LongFunction 		R apply(long value)
ToIntFunction 		int applyAsInt(T value)
ToDoubleFunction 	double applyAsDouble(T value)
ToLongFunction 		long applyAsLong(T value)
DoubleToIntFunction 	int applyAsInt(double value)
DoubleToLongFunction 	long applyAsLong(double value)
IntToDoubleFunction 	double applyAsDouble(int value)
IntToLongFunction 	long applyAsLong(int value)
LongToDoubleFunction 	double applyAsDouble(long value)
LongToIntFunction 	int applyAsInt(long value)





	